Subject: 0
Title: Tema de prueba
Intro: Tema para mostrar la potencia de la herramienta
Lessons:
 - Title: Explicaciones
   Elements:
    - Elem: Text
      Content: |
          Las explicaciones sirven para mostrar información al alumno. 

          Estas esplicaciones se pueden dividir en varios párrafos, y con [Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) se puede formatear de manera sencilla con **negritas**, *itálicas* y `código`.

          También se pueden insertar bloques de código
          ```

          def incrementa(n):
              print(n)
              print(n+1)
              return n + 1
          ```
    - Elem: Text
      Content: |
          También se pueden establecer distintas cabeceras.

          # H1

          ## H2

          ### H3

          #### H4

          ##### H5

          ###### H6
    - Elem: Text
      Content: |
          Markdown soporta listas:

          # Listas numeradas
          1. Elemento 1
          1. Elemento 2

          # Listas no numeradas
          * Elemento 1
          * Elemento 2
          * Elemento 3

          # Listas anidadas
          * Elemento 1
              1. anidado 1
              1. anidado 2
              1. anidada 3
          * Elemento 2
              * anidado 1
              * anidado 2 
    - Elem: Text
      Content: |
          Markdown soporta la incorporación de **imágenes**:
          
          **Imagen desde internet**
          
          ![texto alternativo](https://upload.wikimedia.org/wikipedia/commons/6/63/Wikipedia-logo.png)
          
          **Imagen desde el directorio de temas (*con ruta relativa al directorio del lenguaje*)**
          
          ![triangulo](file:///img/triangulo.jpg)
          
          **Las imágenes pueden ser GIFs animados**
          
          ![dijkstra](https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif)
    - Elem: Text
      Content: |
          También se pueden incluir enlaces en las explicaciones:

          * [Texto del enlace](https://www.ucm.es)
          * [http://costa.ls.fi.upm.es](http://costa.ls.fi.upm.es)
    - Elem: Text
      Content: |
          # Uso de notación matemática
          Para insertar notación matemática usaremos **MathJax** ([https://www.mathjax.org/](https://www.mathjax.org/)), un
          procesador JavaScript que muestra código LaTeX en una página web. Para cargar MathJax se necesita tener **conexión
          a internet**.

          Las fórmulas mátemáticas *inline* se deben definir entre los símbolos **@ @** y **@ @**, mientras que las
          fórmulas matemáticas que producen salto de línea se deben definir entre símbolos **@ @ @** y **@ @ @**.

          *Ejemplo*:

          When @@a \ne 0@@, there are two solutions to @@ax^2 + bx + c = 0@@ and they are
          @@@x = {-b \pm \sqrt{b^2-4ac} \over 2a}.@@@
    - Elem: Text
      Content: |
          En Markdown se pueden definir tablas de una manera muy sencilla:
          
          Cabecera|Cabecera|Cabecera
          :-------|:------:|-------:
           1      | 2      | 3
           1      | 2      | 3
    - Elem: Text
      Content: |
          Donde Markdown no llega, se puede insertar código HTML y se mostrará directamente en la apliación.
          
          Concretamente esto puede servir para incrustar recursos HTML5, como videos de Youtube:
          
          **Vídeos de Youtube**
          
          <iframe width="640" height="360" src="https://www.youtube.com/embed/PDpMgx7avzA" frameborder="0" allowfullscreen target="_self"></iframe>
 - Title: Preguntas de tipo test
   Elements:
    - Elem: Options
      Content: |
          Existen 2 tipos de preguntas de tipo test:
          * Preguntas con una sola opción
          * Preguntas con varias opciones
              
          La pregunta que vemos aquí es de una sola opción válida
      Hint: Se pueden incluir pistas en las preguntas.
      Solution: [1]
      Multiple: no
      Options: 
       - OPCIÓN CORRECTA
       - Opción inválida
       - Opción inválida
       - Opción inválida
    - Elem: Options
      Content: |
          Las preguntas de varias opciones permiten selección varias respuestas:
      Hint: Esto es una Hint
      Multiple: yes
      Solution: [1,2,4]
      Options:
       - 1) OPCIÓN CORRECTA
       - 2) OPCIÓN CORRECTA
       - 3) Opción inválida
       - 4) OPCIÓN CORRECTA
    - Elem: Options
      Content: |
          Nada impide que las preguntas de varias opciones tengan una sola opción válida
      Hint: Esto es una pista
      Multiple: yes
      Solution: [4]
      Options:
       - 1) Opción inválida
       - 2) Opción inválida
       - 3) Opción inválida
       - 4) OPCIÓN CORRECTA
    - Elem: Options
      Content: |
          Y tampoco hay nada que impida que las preguntas de varias opciones no tengan ninguna opción válida
      Hint: Esto es una pista
      Multiple: yes
      Solution: []
      Options:
       - 1) Opción inválida
       - 2) Opción inválida
       - 3) Opción inválida
       - 4) Opción inválida  
 - Title: Preguntas de tipo código
   Elements:
    - Elem: Text
      Content: |
          Las preguntas de código permiten solicitar al usuario framentos de código que son insertados en un programa
          corrector, que es posteriormente evaluado.

          El programa corrector es un programa con uno o más *huecos* que son *rellenados* con el código del alumno.
          La salida de este programa corrector rellenado debe almacenar su salida en un fichero **JSON** con el resultado
          de la corrección junto con posibles mensajes y pistas para el alumno.
    - Elem: Code
      Content: Escribe una asignación para almacenar un ```4``` en la variable ```i```
      File: correctores/tema0.py
      Prompt: ["Escriba aquí el código"]
      Hint: Se pueden incluir pistas en generales en las preguntas de código.
    - Elem: Code
      Content: |
       Las preguntas de tipo código pueden contener más de un hueco, por ejemplo dos:

       Rellena los huecos del siguiente código para duplicar el valor de `a` y para almacenar en la variable `c` la multiplicación de `a` y `b`:
       ```

       a = 1
       <Hueco 0>
       b = 3
       <Hueco 1>
       ```
      Gaps: 2
      File: correctores/tema0b.py
    - Elem: Code
      Content: |
       El número de huecos no tiene ningún límite, únicamente debe ser un número superior a ```0```.

       Rellena los huecos del siguiente código para duplicar asignar a las variables`a`, `b`, `c` y `d` los valores 1, 2, 3, y 4 respectivamente.
       ```

       a = <Hueco 0>
       b = <Hueco 1>
       c = <Hueco 2>
       d = <Hueco 3>
       ```
      Gaps: 4
      Prompt: ["Valor de la variable 'a'","Valor de la variable 'b'","Valor de la variable 'c'","Valor de la variable 'd'"]
      Hint: Esto es una Hint general.
      File: correctores/tema0c.py
