Subject: 0
Title: Condicionales
Intro: |
  En este tema trataremos la instrucción condicional **if**.
Lessons:
 - Title: Condicionales simples
   Elements:
    - Elem: Text
      Content: |
          Una instrucción condicional sirve para ejecutar distintas instrucciones dependiendo
          de que se cumpla, o no, una cierta condición. Esta condición la representaremos como
          un valor **Booleano**.

          La sintaxis del condicional más sencillo consta de la palabra reservada **if**,
          seguida por la condición que deseamos comprobar y terminada por dos puntos. Las
          instrucciones que deseamos que se ejecuten si se cumple la condición las escribiremos
          más a la derecha que el resto del código y todas a la misma altura. Cuado deseemos
          continuar con el código que no requiere que la condición se cumpla volveremos a escribir
          a la misma altura que el **if**:

          ```

          INS
          if COND:
              INS1 # Primera instrucción que requiere que se cumpla COND
              ...
              INSn # Última instrucción que requiere que se cumpla COND
          INS' # Esta intrucción no requiere que se cumpla COND. Se ejecuta después de
               # INSn si COND se cumplía y después de INS si no se cumplía.
          ```

          Procura que tu instrucción **return** no esté dentro de un condicional. Es mejor
          que toda función tenga una única instrucción **return**, que será la última del
          programa.
    - Elem: Text
      Content: |
          Un ejemplo sencillo de función que requiere un condicional es aquella que calcula
          el valor absoluto de un número. Nuestra condición en este caso es comprobar si el
          número es negativo; en este caso le cambiaremos el signo, mientras que en otro caso
          no es necesario que hagamos nada:

          ```
          def abs(x):
              if x < 0:
              # Cambio de signo el dato de entrada
                    x = -x
              return x
          ```
    - Elem: Options
      Content: |
          ¿Qué debemos escribir en `INSTRUCCIÓN` para comprobar que la división es segura?

          ```

          def division(a,b):
              resultado = 0
              INSTRUCCIÓN
                  resultado = a / b
              return resultado
          ```
      #Hint: Se pueden incluir pistas en las preguntas.
      Solution: [3]
      Multiple: no
      Options:
        - "if a != 0:"
        - if a != 0
        - "if b != 0:"
        - if b != 0
    - Elem: Options
      Content: |
          Supongamos la siguiente definición para la función `calculo`:

          ```

          def calculo(rango):
              total = 0
              if (not(rango/4<=12)):
              	 total = total+1
              if ((rango>1 and rango<5) or (rango==8)):
                 total = total+1
              if (rango>1):
                 if (rango<5 or rango==8):
                    total = total+1
              return total;
          ```
          ¿Qué devolerá la llamada "calculo(3)"?
      #Hint: Se pueden incluir pistas en las preguntas.
      Solution: [3]
      Multiple: no
      Options:
        - 0
        - 1
        - 2
        - 3
        - Da un error
    - Elem: Text
      Content: |
          Si queremos hacer cosas distintas dependiendo de si nuestra condición se cumple o no
          necesitamos usar **else:** a la misma altura que **if**. Así, las instrucciones del
          bloque **if** se ejecutarán cuando se cumpla la condición y las del bloque **else**
          cuando no se cumpla:

          ```

          if COND:
              INS1 # Primera instrucción que requiere que se cumpla COND
              ...
              INSn # Última instrucción que requiere que se cumpla COND
          else:
              INS'1 # Primera instrucción que requiere que no se cumpla COND
              ...
              INS'm # Última instrucción que requiere que no se cumpla COND
          ```
    - Elem: Options
      Content: |
          Es importante comprender la diferencia entre las instrucciones que van detrás de un
          bloque **if** (sin **else**), y las instrucciones que van dentro de un bloque **else**.

          Por ejemplo, ¿qué muestra por pantalla cada uno de estos programas?
          ```

          edad = 20
          if edad >= 18:
            print("Mayor")

          print("Menor")
          ```

          ```

          edad = 20
          if edad >= 18:
            print("Mayor")
          else:
            print("Menor")
          ```


      #Hint: Se pueden incluir pistas en las preguntas.
      Solution: [4]
      Multiple: no
      Options:
        - Ambos son equivalentes y muestran "Menor" por pantalla.
        - Ambos son equivalentes y muestran "Mayor" por pantalla.
        - El primero muestra "Mayor". El segundo muestra "Menor".
        - El primero muestra "Mayor" seguido de "Menor". El segundo solo muestra "Mayor".
    - Elem: Text
      Content: |
          Podemos usar un condicional con **else** para calcular el máximo de dos números.
          En este caso, comprobaremos si el primero es mayor o igual que el segundo y en tal caso
          guardaremos su valor en la variable **max**. En otro caso, el máximo es el segundo,
          por lo que guardaremos su valor en **max**. Por último, debemos recordar devolver
          el valor con **return**:

          ```

          def maximo(x,y):
              if x >= y:
                 max = x
              else:
                 max = y
              return max
          ```
    - Elem: Code
      Content: |
       Queremos escribir una función que devuelva el saludo `"Buenos días"` si la hora es entre
       las 7 y las 11 de la mañana (ambas horas incluidas) y `"Hola"` en otro caso. Supondremos
       que la función recibe un número natural entre 0 y 23 que representa la hora.

       ```

       def saludo(h):
           if (<Hueco 0>):
               saludo = "Buenos días"
           <Hueco 1>
               saludo = "Hola"
           return saludo
       ```
      Gaps: 2
      Hint: Recuerda que else se usa para indicar el caso en el que la condición no se cumple.
      File: correctores/condicionales/condicionalesA.py
    - Elem: Text
      Content: |
          Por último, es posible que tengamos más de una condición sobre la que realizar distinción.
          En este caso, podemos usar un **if** con la primera condición, usar **elif** para la
          siguiente condición, que se usará cuando no se cumpla la primera condición pero sí la segunda,
          y seguir usando **elif** para el resto de condiciones. Es posible terminar la instrucción
          condicional con un **else**, que se aplicará cuando ninguna de las condiciones anteriores
          se cumpla, pero no es obligatorio.



          ```

          if COND1:
              BLOQUE1 # Bloque de instrucciones que se ejecuta si se cumple COND1
          elif COND2:
              BLOQUE2 # Bloque de instrucciones que se ejecuta si no se cumple COND1
                      # y sí se cumple COND2.
          ...
          elif CONDn:
              BLOQUEn # Bloque de instrucciones que se ejecuta si no se cumplen COND1 ... COND(n-1)
                      # y sí se cumple CONDn
          else:
              BLOQUEelse # Bloque de instrucciones que se ejecuta si no se cumplen COND1 ... CONDn
                         # Este bloque es opcional
          ```
    - Elem: Text
      Content: |
          Podemos usar un condicional con **elif** y **else** para encontrar el máximo de 3 números.
          Primero comprobaremos si el primero de los números es el máximo y en tal caso lo guardaremos
          en **max**. Si no es el caso, entonces comprobaremos si el segundo número es el máximo y, en
          tal caso, lo almacenaremos en **max**. Si tampoco es el caso, entonces el tercer número es el
          máximo.

          ```

          def maximo3(x,y,z):
              if x >= y and x >= z:
                 max = x
              elif y >= x and y >= z:
                 max = y
              else:
                 max = z
              return z
          ```
    - Elem: Options
      Content: |
          ¿Existe alguna diferencia entre estos dos fragmentos de código?

          ```


          if h < 10:
            h = h + 2
          if h > 10:
            h = h - 2
          print(h)
          ```

          ```

          if h < 10:
            h = h + 2
          elif h > 10:
            h = h - 2
          print(h)
          ```

      Hint: Fíjate en el primer programa. ¿Es posible que se puedan ejecutar ambas
            sentencias `h = h + 2` y `h = h - 2` para un valor de h determinado?
            ¿Ocurre lo mismo en el segundo programa?
      Solution: [2]
      Multiple: no
      Options:
        - No. Los programas son completamente equivalentes.
        - Sí. Su comportamiento difiere cuando el valor inicial de h es 9.
        - Sí. Su comportamiento difiere cuando el valor inicial de h es 0 o 9.
        - Sí. El segundo programa falla cuando el valor inicial de h es 0. El primero no.
    - Elem: Code
      Content: |
       Queremos escribir una función que transforma una nota entre 0 y 10 en su correspondiente
       en la escala `"suspenso"` - `"sobresaliente"`  de acuerdo al siguiente baremo [0,5)
       suspenso; [5,7) aprobado; [7,9) notable; [9,10] sobresaliente.. Rellena los huecos para
       implementar dicha función, suponiendo que `nota_num` toma valores entre 0 y 10.

       ```

       def nota(nota_num):
           if (<Hueco 0>):
               nota_transformada = "suspenso"
           <Hueco 1>
               nota_transformada = "aprobado"
           <Hueco 2>
               nota_transformada = "notable"
           <Hueco 3>
               nota_transformada = "sobresaliente"
           return nota_transformada
       ```
      Gaps: 4
      Prompt: ["Valor de la variable 'nota_transformada'"]
      Hint: Usar elif te permitirá distinguir entre varias opciones
      File: correctores/condicionales/condicionalesB.py
 - Title: Condicionales anidados
   Elements:
    - Elem: Text
      Content: |
          Por supuesto, es posible usar instrucciones condicionales dentro un **if**, **elif**
          o **else**. Por ejemplo, la función `grado` recibe como argumentos los coeficientes
          de un polinomio de grado 2 (`a` es el coficiente para x^2, b para x y c el término
          independiente) y devuelve el grado del polinomio según los distintos coeficientes
          sean o no 0. Fíjate que es posible hacerlo sin anidar if. ¡Prueba a hacerlo en casa!

          ```

          def grado(a,b,c):
              if a == 0:
                 if b == 0:
                    gr = 0
                 else:
                    gr = 1
              else:
                 gr = 2
              return gr
          ```
    - Elem: Options
      Content: |
          Partimos de la siguiente definición de función:

          ```
          def misterio(x,y):
            if x <= y:
              y = y - x
              if y % 2 == 0:
                print("Caso 1")
            else:
              x = x - y
              if x % 2 == 0:
                print("Caso 2")
              else:
                print("Caso 3")
          ```
          ¿Qué ocurre si realizamos la llamada `misterio(7,2)`?
      
      Solution: [3]
      Multiple: no
      Options:
        - Se imprime por pantalla "Caso 1".
        - Se imprime por pantalla "Caso 2".
        - Se imprime por pantalla "Caso 3".
        - No se imprime nada por pantalla.
    - Elem: Options
      Content: |
          ```
          def misterio(x,y):
            if x <= y:
              y = y - x
              if y % 2 == 0:
                print("Caso 1")
            else:
              x = x - y
              if x % 2 == 0:
                print("Caso 2")
              else:
                print("Caso 3")
          ```
          ¿Y si realizamos la llamada `misterio(3,6)`?
      
      Solution: [4]
      Multiple: no
      Options:
        - Se imprime por pantalla "Caso 1".
        - Se imprime por pantalla "Caso 2".
        - Se imprime por pantalla "Caso 3".
        - No se imprime nada por pantalla.
    - Elem: Options
      Content: |
          ```
          def misterio(x,y):
            if x <= y:
              y = y - x
              if y % 2 == 0:
                print("Caso 1")
            else:
              x = x - y
              if x % 2 == 0:
                print("Caso 2")
              else:
                print("Caso 3")
          ```
          ¿Y si realizamos la llamada `misterio(3,5)`?
      
      Solution: [1]
      Multiple: no
      Options:
        - Se imprime por pantalla "Caso 1".
        - Se imprime por pantalla "Caso 2".
        - Se imprime por pantalla "Caso 3".
        - No se imprime nada por pantalla.
    - Elem: Code
      Content: |
          Escribe una función `min_max(x, y, sel)` donde `x` e `y` son valores numéricos
          y `sel` es un valor Booleano. Si `sel` es `True` entonces la función devuelve el mínimo entre
          `x` e `y`, mientras que en otro caso devuelve el máximo.

          ```

          def min_max(x,y,sel):
              if (<Hueco 0>):
                  <Hueco 1>
                      resultado = x
                  else:
                      resultado = y
              else:
                  <Hueco 2>
                      resultado = x
                  else:
                      resultado = y
              return resultado
          ```

      Gaps: 3
      Prompt: ["Valor de la variable 'resultado'"]
      Hint: Comprueba primero si tienes que hacer el mínimo o el máximo y luego compara los números.
      File: correctores/condicionales/condicionalesC.py